///**
// * 第一种创建任务方式：
// * 方法原型：Task task(String name) throws InvalidUserDataException;
// */
////定义Task变量接收task()方法创建的Task,方法配置创建的Task
//def Task taskA = task(taskA)
////配置创建的Task
//taskA.doFirst {
//    println "第一种创建任务的方式"
//}
//
///**task
// * 第二种创建任务方式：可在Map参数中进行相关配置，如依赖、任务描述、组别等
// * 方法原型：Task task(Map<String, ?> args, String name) throws InvalidUserDataException;
// */
//def Task taskB = task(group: BasePlugin.BUILD_GROUP,taskB,description: "描述")
////配置创建的Task
//taskB.doLast {
//    println "第二种创建任务的方式"
//    println "任务taskB分组：${taskB.group}"
//    println "任务taskB描述：${taskB.description}"
//}
//
///**
// * 第三种创建任务方式：通过闭包的方式创建Task,闭包里的委托对象就是Task,即可在闭包内调用Task
// * 的一切属性和方法来进行Task的配置
// * 方法原型：Task task(String name, Closure configureClosure);
// */
//task taskC{
//    description 'taskC的描述'
//    group BasePlugin.BUILD_GROUP
//    doFirst{
//        println "第三种创建任务的方式"
//        println "任务taskC分组：${group}"
//        println "任务taskC描述：${description}"
//    }
//}
//
///**
// * 第四种创建任务的方式：可在闭包中灵活配置，也可在Map参数中配置，闭包中中的配置父覆盖Map中相同的配置
// * 方法原型：Task task(Map<String, ?> args, String name, Closure configureClosure);
// */
//def Task taskD = task(group: BasePlugin.BUILD_GROUP,taskD,description: "描述"){
//    description 'taskD的描述'
//    group BasePlugin.UPLOAD_GROUP
//    doFirst{
//        println "第四种创建任务的方式"
//        println "任务taskD分组：${group}"
//        println "任务taskD描述：${description}"
//    }
//}
//
////使用TaskContainer创建任务的方式
//tasks.create("taskE"){
//    description 'taskE的描述'
//    group BasePlugin.BUILD_GROUP
//    doFirst{
//        println "第三种创建任务的方式"
//        println "任务taskE分组：${group}"
//        println "任务taskE描述：${description}"
//    }
//}
//
////多种方式访问任务
//
///**
// * 访问任务的第一种方式：Task名称.doLast{}
// */
//task taskF{
//
//}
//taskF.doLast{
//    println "第一种访问任务的方式"
//}
//
///**
// * 访问任务的第二种方式：使用TaskContainer访问任务
// */
//task taskG{
//
//}
//tasks['taskG'].doLast {
//    println "第二种访问任务的方式"
//}
//
///**
// * 访问任务的第三种方式：使用路径访问任务
// */
//
//task taskH{
//    println 'taskH'
//    //通过路径访问任务，参数可以是路径（没有访问成功，写法如下）
//    println tasks.findByPath(':GradleTask:taskG')
//    //通过路径访问任务，参数可以是任务名称
//    println tasks.findByPath('taskG')
//    println tasks.getByPath('taskG')
//    //test不存在的任务
////    println "test不存在的任务"+tasks.getByPath('test')
//}
//
///**
// * 访问任务的第四种方式：使用任务名称访问
// */
//task taskJ
//tasks['taskJ'].doLast{
//    println 'taskJ'
//    println tasks.findByName('taskJ')
//    println tasks.getByName('taskJ')
//}



//任务分组与描述
def Task task1 = task taskK
task1.group = BasePlugin.BUILD_GROUP
task1.description = '测试任务分组与描述'
task1.doLast {
    println "taskK is group = ${group}, description = ${description}"
}

//<< 任务操作符
//简写方式，Gradle 5.0 开始以不推荐这种写法
//task taskL <<{
//    println "doLast"
//}
//推荐写法
//task taskL{
//    doLast{
//        println "doLast"
//    }
//}
