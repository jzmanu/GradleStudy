apply plugin: 'com.android.application'
apply from: "version.gradle"
android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    //配置Java编译选项
    compileOptions{
        //设置源文件的编码
        encoding = 'utf-8'
        //设置Java源代码的编译级别()
        sourceCompatibility = JavaVersion.VERSION_1_8
//        sourceCompatibility  "1.8"
//        sourceCompatibility  1.8
//        sourceCompatibility  "Version_1_8"
        //设置Java字节码的版本
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    //adb配置选项
    adbOptions{
        //设置执行adb命令的超时时间
        timeOutInMs = 5 * 1000
        /**
         * 设置adb install安装这个操作的设置项
         * -l:锁定应用程序
         * -r:替换已存在的应用程序
         * -t:允许测试包
         * -s:把应用程序安装到SD卡上
         * -d:允许应用程序降级安装
         * -g:为该应用授予所有运行时的权限
         */
        installOptions '-r', '-s'
    }
    //DEX选项配置
    dexOptions{
        //设置是否启用dx增量模式
        incremental true
        //设置执行dx命令为其分配的最大堆内存
        javaMaxHeapSize '4g'
        //设置是否开启jumbo模式，如果项目方法数超过65535，需要开启jumbo模式才能构建成功
        jumboMode true
        //设置Android Gradle运行dx命令时使用的线程数量，可提高dx执行的效率
        threadCount 2
        /**
         * 设置是否执行dex Libraries库工程,开启后会提高增量构建的速度，会影响clean的速度，默认为true
         * 使用dx的--multi-dex选项生成多个dex,为避免和库工程冲突，可设置为false
         */
        preDexLibraries true
    }

    defaultConfig {
        minSdkVersion 22
    }

    //签名文件配置
    signingConfigs {
        //读取配置的与签名文件信息对应的环境变量
        def appStoreFile = System.getenv('STORE_FILE')
        def appStorePassword = System.getenv('STORE_PASSWORD')
        def appKeyAlias = System.getenv('KEY_ALIAS')
        def appKeyPassword = System.getenv('KEY_PASSWORD')
        //如果获取不到相关签名文件信息，则使用默认的签名文件
        if (!appStoreFile || !appStorePassword || !keyAlias || !keyPassword) {
            appStoreFile = "debug.keystore"
            appStorePassword = "android"
            appKeyAlias = "androiddebugkey"
            appKeyPassword = "android"
        }
        release {
            storeFile file(appStoreFile)
            storePassword appStorePassword
            keyAlias appKeyAlias
            keyPassword appKeyPassword
        }
        debug {
            //默认情况下，debug模式下的签名已配置为Android SDK自动生成的debug签名文件证书
            //.android/debug.keystore
        }
    }
    //维度
    flavorDimensions "channel"
    productFlavors {
        miui {
            dimension "channel"
            manifestPlaceholders.put("CHANNEL", "google")
            buildConfigField 'String', 'URL', '"http://www.miui.com"'
            resValue 'string', 'welcome', 'miui'
        }
//        Error:All flavors must now belong to a named flavor dimension. Learn more at https://d.android.com/r/tools/flavorDimensions-missing-error-message.html
        baidu {
            dimension "channel"
            manifestPlaceholders.put("CHANNEL", "baidu")
            buildConfigField 'String', 'URL', '"http://www.baidu.com"'
            resValue 'string', 'welcome', 'baidu'
        }

    }

    //    productFlavors.all{ flavor ->
//        manifestPlaceholders.put("CHANNEL",name)
    buildTypes {
        release {
            signingConfig signingConfigs.release
            //开启混淆
            minifyEnabled false
            //开启zipalign优化
            zipAlignEnabled true
            //配置混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            //配置签名
            signingConfig signingConfigs.release
            //配置在当前构建类型下applicationId的后缀，构建生成Apk的包名会在applicationId的基础上添加后缀
            applicationIdSuffix '.debug'
            //配置是否生成一个可供调试的Apk
//            denbuggable true
            //配置是否生成一个可供调试jni(c/c++)代码的Apk
            jniDebuggable true
            //是否启用proguard混淆
            minifyEnabled true
            //配置当程序中方法数超过65535个时，是否启用自动拆分多个dex的功能，
            multiDexEnabled true
            //配置proguard混淆使用的配置文件，可配置对个混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //配置是否自动清理未使用的资源,默认为false
            shrinkResources true
        }
    }
    /**
     * 修改打包生成的apk的文件名
     */
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk') &&
                    'release' == variant.buildType.name) {
                outputFileName = "AndroidGradleProject_v${variant.versionName}_${buildTime()}.apk"
            }
        }
    }
}

//当前时间
def static buildTime() {
    def date = new Date()
    return date.format("yyyMMdd")
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    compile'com.android.support:multidex:1.0.1'
}
